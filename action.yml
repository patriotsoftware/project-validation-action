name: 'Sonar Project Validation'
description: 'Run Sonar and Tests to Validate Quality'

inputs:
  github-repo-name:
    description: 'GitHub repo name'
    required: true
    default: ''
  sonar-tool-version:
    description: 'Sonar tool version'
    required: false
    default: '5.13.0'
  use-dependencies:
    description: 'Use Docker to run dependencies.'
    required: false
    default: false
  docker-compose-file-path:
    description: 'Path to docker compose file to start dependencies'
    required: false
    default: 'docker-compose/test-dependencies-compose.yml'  
  sonar-token:
    description: 'Sonar Token'
    required: true 
  path-to-repo-root:
    description: 'Path to Repo Root'
    required: false
    default: ''
  tests-path:
    description: 'Path to tests'
    required: false
    default: 'test/'
  dotnet-test-command-args:
    description: 'dotnet test command arguments'
    required: false
    default: '--filter TestCategory!="Smoke"'
  local-runsettings-filename:
    description: 'full local.runsettings file path, use NONE when file not required'
    required: false
    default: 'local.runsettings'
  upload-sonar-results:
    description: 'Whether to upload Sonar results as an artifact'
    required: false
    default: true
  fail-on-failure:
    description: 'set to true if you wish to fail this run when the Quality Gate is red'
    required: false
    default: true
  ignore-failures:
    description: 'Ignore Sonar Quality Gate. Set sonar'
    required: false
    default: ''
  vulnerability_codes:
    description: 'Pipe delimited vulnerabilities to look for on build.log output'
    default: 'NU1902|NU1903|NU1904'
    
runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Disable shallow-clone so Sonar can do git-blame
    
    - name: Dotnet Sonar Scanner Install
      run: |
        if dotnet tool list -g | grep -q sonarscanner; then
          echo "Sonar Scanner Already Installed"
        else
          dotnet tool install --global dotnet-sonarscanner --version ${{inputs.sonar-tool-version}}
          echo "Sonar Scanner now installed."
        fi
      shell: bash

    - name: Dotnet Coverage Install
      run: | 
        if dotnet tool list -g | grep -q dotnet-coverage; then
          echo "Dotnet Coverage Already Installed"
        else
          dotnet tool install -g dotnet-coverage
          echo "Dotnet Coverage now installed."
        fi
      shell: bash

    - name: Sonarqube Run
      run: |
        export PATH=$PATH:$HOME/.dotnet/tools
        dotnet sonarscanner begin /k:"SynergyDataSystems_${{ inputs.github-repo-name }}" /d:sonar.scm.revision=$GITHUB_SHA /d:sonar.token=${{ inputs.sonar-token }} /d:sonar.host.url=https://sonar.dev-internal.patriotsoftware.com /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.verbose=false
      shell: bash
        
    - name: Containerized Dependencies   
      if: ${{ (inputs.use-dependencies == 'true') && (inputs.path-to-repo-root == '') }}    
      run: |
        echo "Containerized Dependencies Running docker compose"
        docker-compose -f ${{ inputs.docker-compose-file-path }} up -d
      shell: bash

    - name: Containerized Dependencies with Path   
      if: ${{ (inputs.use-dependencies == 'true') && (inputs.path-to-repo-root != '') }}    
      run: |
        echo "Containerized Dependencies Running docker compose with path"
        PATH_TO_REPO_ROOT='${{ inputs.path-to-repo-root }}' docker-compose -f ${{ inputs.docker-compose-file-path }} up -d
      shell: bash
      
    - name: Run Tests and Code Coverage
      run: |        
        echo "setting variables for dotnet tests and code coverage..."          
        export LOCAL_RUNSETTINGS="${{ inputs.local-runsettings-filename }}"
        export TESTS_PATH="${{ inputs.tests-path }}"
        export COMMAND_ARGS='${{ inputs.dotnet-test-command-args }}'    
         if [ $LOCAL_RUNSETTINGS != "NONE" ]; then
          echo "Using local.runsettings file."          
          COMMAND_ARGS+=" --settings:$TESTS_PATH$LOCAL_RUNSETTINGS"          
        fi  
        DOTNET_COMMAND=$(echo dotnet test --logger '"trx;LogFileName=test-results.trx"' --verbosity quiet --configuration Release $COMMAND_ARGS)       
        
        echo "running dotnet tests and code coverage....."    
        echo "COMMAND: dotnet-coverage collect '$DOTNET_COMMAND' -f xml -o 'coverage.xml'" 

        # command execution
        dotnet tool update -g dotnet-coverage
        export PATH=$PATH:$HOME/.dotnet/tools        
        . ~/.bashrc               
        eval dotnet-coverage collect '$DOTNET_COMMAND' -f xml -o 'coverage.xml' 2>&1 | tee build.log
      shell: bash

#Vulnerability scan options:
# - Issue an alert or post outside GitHub a Vulnerability scan status
# - Fail run based on vulnerabilities found or levels 
#     - dotnet restore PatriotSoftware.Templates.Api.Spg.sln --verbosity quiet /warnaserror:NU1902,NU1903,NU1904
# - Create custom rule (code changes involved) and import to Sonar 
#    dotnet list $project.sln package --vulnerable --include-transitive 2>&1 | tee build.log
# use continue-on-error=true setting
#   grep -q -i "NU1903|NU1904" build.log; [ $? -eq 0 ] && echo "Security Vulnerabilities found on the log output" && exit 1
    - name: Vulnerability Scan
      id: vulnerability_scan
      if: ${{ inputs.vulnerability_codes != '' }}
      env:
        vulns: ${{ inputs.vulnerability_codes }}      
      continue-on-error: true
      run: |
        echo "Analyze command build.log output..."
        grep -qE $vulns build.log && echo "Security Vulnerabilities matching $vulns found on build.log output" && exit 1 || echo "No matched vulnerabilities found."        
      shell: bash
                
    - name: Sonarqube end
      run: |
        export PATH=$PATH:$HOME/.dotnet/tools
        . ~/.bashrc
        dotnet sonarscanner end /d:sonar.token="${{ inputs.sonar-token }}"
      shell: bash

    - uses: actions/upload-artifact@v4
      if: ${{ inputs.upload-sonar-results == 'true' }}
      with:
        name: sonar-report
        path: .sonarqube/out/.sonar/report-task.txt

    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      if: ${{ (inputs.fail-on-failure == 'true') || (inputs.ignore-failures != 'sonar') }}
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
      with:
        scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt

    - name: Output Docker Container Logs
      uses: jwalton/gh-docker-logs@v2
      if: ${{ inputs.use-dependencies == 'true' && always() }}

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Project Validation Test Results            
        path: "${{ inputs.tests-path }}**/*.trx"
        reporter: dotnet-trx

    - name: Stop Containerized Dependencies
      if: ${{ (inputs.use-dependencies == 'true') && always() }}
      run: |
        echo "Containerized Dependencies: Stopping Docker Containers"
        docker-compose -f ${{inputs.docker-compose-file-path}} down -v --remove-orphans
      shell: bash

    - name: Vulnerability Status
      if: ${{ steps.vulnerability_scan.outcome == 'failure'}}
      continue-on-error: true
      run: |
        echo "Vulnerability status: FAILED"
        dotnet list package --vulnerable --include-transitive
      shell: bash

    - name: SonarQube Code Coverage Results
      run: |
        export BRANCH_NAME=${GITHUB_REF#refs/heads/} 
        export REPO_NAME=${{ inputs.github-repo-name }}
        echo "SonarQube Code Coverage Results: https://sonar.dev-internal.patriotsoftware.com/dashboard?branch=$BRANCH_NAME&id=SynergyDataSystems_$REPO_NAME"
      shell: bash
